package bignum

import bignum.compute.*
import kotlin.system.measureNanoTime


fun hello(): String = "Hello, Kotlin/Native!"

fun main() {
    println(hello())


    val a = "65537"
    val m = "15166926664709716667942205393010561001948046930655516915962954857313795620516487420165145314674847016632910428541850885455208751754091856593720859678428300038169958374637870151540444491136118563716152917433640638540167202512723077277539513297837528211292408368640636807050066740641222119554707253152691400848501568174444017704890252120050024738716345450700365127964732618227829078048653931617963872233989434361163363978907267968992471699236848546273367345823624845717451894562839252947441335769348384749192736588371871150109884850152924857412343286027119085978105908844643816626934477827791704805246658776920099879968"
    println(modInverse(a, m))

}







// Extra
inline fun <R> measures(block1: () -> R, block2: () -> R) {
    val t1 = measureNanoTime {
        for (i in 0 until 10000) {
            block1()
        }
    }
    val t2 = measureNanoTime {
        for (i in 0 until 10000) {
            block2()
        }
    }
    println("${block1()} $t1\n${block2()} $t2")
}